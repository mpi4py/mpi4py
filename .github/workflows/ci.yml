name: ci

on:
  push:
    branches:
      - master
      - maint
      - ci/all
      - ci/github
  pull_request:
    branches:
      - master
      - maint
  workflow_dispatch:

jobs:

  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-12
          - windows-2022
        mpi:
          - mpich
          - openmpi
          - msmpi
        py:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11-dev"
          - "pypy-3.7"
          - "pypy-3.8"
          - "pypy-3.9"
        exclude:
          - os: ubuntu-22.04
            mpi: msmpi
          - os: macos-12
            mpi: msmpi
          - os: windows-2022
            mpi: mpich
          - os: windows-2022
            mpi: openmpi

    steps:

    - name: Configure hostname
      if:   runner.os == 'Linux' || runner.os == 'macOS'
      run:  echo 127.0.0.1 `hostname` | sudo tee -a /etc/hosts > /dev/null

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup MPI (${{ matrix.mpi }})
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: ${{ matrix.mpi }}

    - name: Use Python ${{ matrix.py }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py }}
        architecture: x64

    - name: Install packaging tools
      run:  python -m pip install --upgrade setuptools pip wheel
    - name: Build package
      run:  python -m pip wheel -vvv --wheel-dir=dist .
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mpi4py-${{matrix.os}}-${{matrix.mpi}}
        path: dist/mpi4py-*.whl

    - name: Install test dependencies
      run:  python -m pip install --upgrade -r conf/requirements-test.txt
      if:   (runner.os == 'Linux' || !startsWith(matrix.py, 'pypy-')) && !endsWith(matrix.py, '-dev')
    - name: Install package for testing
      run:  python -m pip install --no-index --find-links=dist mpi4py
    - name: Test package (np=1)
      run:  mpiexec -n 1 python test/runtests.py -v
    - name: Test package (np=2)
      run:  mpiexec -n 2 python test/runtests.py -v -f -e spawn
    - name: Test subpackage (np=1)
      run:  mpiexec -n 1 python demo/futures/test_futures.py -v
    - name: Test subpackage (np=2)
      run:  mpiexec -n 2 python demo/futures/test_futures.py -v
    - name: Test subpackage
      run:  python demo/test-run/test_run.py -v
    - name: Test extra
      run:  bash demo/init-fini/run.sh
    - name: Test extra
      run:  bash demo/check-mpiexec/run.sh
    - name: Uninstall package after testing
      run:  python -m pip uninstall --yes mpi4py

  conf:
    runs-on: ubuntu-22.04

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Python
      uses: actions/setup-python@v4
      with:
        python-version: 3

    - name: Install build dependencies
      run:  python -m pip install --upgrade cython

    - name: Build package
      run:  python setup.py build
      env:
        MPICFG: nompi
        CFLAGS: -O0

    - name: Check build configuration
      run:  |
        # check nompi config.h
        a=conf/nompi/config/config.h
        b=src/lib-mpi/config/config.h
        diff -u $a $b

    - name: Check code generation
      run:  |
        python conf/mpiscanner.py
        git diff && test -z "$(git diff)"

  lint:
    runs-on: ubuntu-22.04

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Python
      uses: actions/setup-python@v4
      with:
        python-version: 3

    - name: Install package
      run:  python -m pip install .
      env:
        MPICFG: nompi-fast
        CFLAGS: -O0

    - name: Install lint dependencies
      run:  python -m pip install --upgrade -r conf/requirements-lint.txt

    - name: pycodestyle
      run:  pycodestyle src/mpi4py

    - name: pydocstyle
      run:  pydocstyle src/mpi4py

    - name: flake8
      run:  flake8 src/mpi4py

    - name: pylint
      run:  pylint mpi4py

  type:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py }}

    - name: Install package
      run:  python -m pip install .
      env:
        MPICFG: nompi-fast
        CFLAGS: -O0

    - name: Check stubs generation
      run:  |
        python conf/mpistubgen.py
        git diff && test -z "$(git diff)"

    - name: Install type dependencies
      run:  python -m pip install
              mypy
              numpy

    - name: mypy (typecheck)
      run:  mypy -p mpi4py

    - name: mypy (stubtest)
      run:  stubtest mpi4py
              ${{ matrix.py == '3.8' && '$(
              echo mpi4py.*.Executor.submit > allowlist &&
              echo --allowlist=allowlist )' || '' }}

  skbuild:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-12
          - macos-11
        mpi:
          - mpich
          - openmpi
        py:
          - 3
        include:
           - os: windows-2022
             mpi: msmpi
             py: 3
           - os: windows-2019
             mpi: msmpi
             py: 3

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup MPI (${{ matrix.mpi }})
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: ${{ matrix.mpi }}

    - name: Use Python ${{ matrix.py }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py }}

    - name: Install packaging tools
      run:  python -m pip install build

    - name: Build sdist and wheel
      run:  python -m build
      env:
        MPI4PY_BUILD_BACKEND: skbuild
        MPI4PY_LOCAL_VERSION: ${{ matrix.mpi }}

    - name: Install wheel
      run:  python -m pip install --no-index --find-links=dist mpi4py

    - name: Test wheel after install
      run:  mpiexec -n 2 python -m mpi4py.bench helloworld

    - name: Uninstall wheel after testing
      run:  python -m pip uninstall --yes mpi4py

    - name: Upload wheel
      uses: actions/upload-artifact@v3
      with:
        name: mpi4py-skbuild-${{ matrix.os }}
        path: dist/mpi4py-*.whl
